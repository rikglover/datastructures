1a) x = 11, y = 11
1b) x = 9, y = 9
1c) x = 10, y = 11
1d) x = 10, y = 9


2a)

for(int i = 1; i <= 100; i++) {
    // do something
}


2b)

for(int j = 0; j < 10; j++) {
    // do something
}


2c)

for(int m = 0; m <= 100; m += 2) {
    // do something
}


2d)

for(int n = 1; n <= 1024; n *= 2) {
    // do something
}



3a)

for(int i = 0; i < 10; i++) {
    System.out.println(i);
}


3b)

for(int i = 1; 1 <= 10; i++) {
    System.out.println(i);
}


3c)

for(int i = 0; i < 20; i += 2) {
    System.out.println(i);
}


4)

public class NumericFunctions {

  private static int factorial(int n) {
    int result = 1;

    for (int i = 2; i <= n; i++) {
      result *= i;
    }

    return result;
  }

  public static void main(String[] args) {
    for (int n = 0; n <= 10; n++) {
      System.out.print(n);
      System.out.print(" ");
      System.out.println(factorial(n));
    }
  }
}

The correct answer of 1 is returned because result is initialized to 1 and because the loop control
variable, i, is initialized to 2 and the boolean condition checks against being less than or equal
to n, which doesn't become true unless n is 2 or greater. So, for the first 2 values of n
(i.e. 0 and 1) the loop will never be executed, which means the method just returns 1;



5) It will never enter the loop body because the loop control expression checks for i <= n. Since i
is initialized to 2 and n is negative the check will never evaluate to true. So it just outputs the
value of result, which is 1, for each iteration of the loop in main.

public class NumericFunctions {

  private static int factorial(int n) {
    int result = 1;

    for (int i = 2; i <= n; i++) {
      result *= i;
    }

    return result;
  }

  public static void main(String[] args) {
    for (int n = 1; n <= 10; n++) {
      System.out.print(n);
      System.out.print(" ");
      System.out.println(factorial(-1 * n));
    }
  }
}



6a) 12

6b) It overflows after you get to Integer.MAX_VALUE

6c)


// only works up to 20
public class NumericFunctions {

  private static long factorial(int n) {
    long result = 1;

    for (int i = 2; i <= n; i++) {
      result *= i;
    }

    return result;
  }

  public static void main(String[] args) {
    for (int n = 1; n <= 20; n++) {
      System.out.print(n);
      System.out.print(" ");
      System.out.println(factorial(n));
    }
  }
}



7)

public class NumericFunctions {

  private static int factorial(int n) {
    int result = 1;

    for (int i = 2; i <= n; i++) {
      result *= i;
    }

    return result;
  }

  private static long pow(long m, long n) {
    if(n < 0) {
      throw new IllegalArgumentException("N must be greater than or equal to zero");
    }

    long result = 1;

    for(long i = 0; i < n; i++) {
      result *= m;
    }

    return result;
  }

  public static void main(String[] args) {
    for (int n = 1; n <= 10; n++) {
      System.out.print(n);
      System.out.print(" ");
      System.out.println(factorial(n));
    }

    System.out.println("\n\n");

    for (int i = 1; i <= 9; i++) {
      for(int j = 1; j <= 9; j++) {
        System.out.print(pow(i, j) + "  ");
      }

      System.out.println();
    }
  }
}


