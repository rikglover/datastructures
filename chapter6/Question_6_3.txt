1) The getNode() method is designed to return the Node in the list that corresponds to a particular
logical index within the list. In this case, what is needed is a way to get the values of the next
and prev attributes of a given node, which correspond to the next and previous links in the linked
list. Therefore the getNode() method cannot be used in this case.

** This is not quite correct. It could be used by simply getting the index + 1 and - 1 of the **
** index node. However, each call to getNode is O(n), requiring a full traversal, which is not **
** necessary since we already have next and previous links. Therefore, it is best not to use **
** getNode in this case. **

** In my defense, it did not even occur to me that one might consider that for that very reason **
** Having said that, in retrospect, the question did quite clearly ask if it COULD be done **

2) In the case where we are deleting the last item in the list, the next field of the last node will
be null. Although we will still want to set the prev.next field to null to indicate that it is now
the last item in the list, we will not want to set the next.prev field to anything, because the next
field is null and dererencing it would result in an NPE. Because the prev element will become the
new last node in the list and it's next field has already been set to null it is not necessary to do
anything to the current next anyway so the if-statement simply checks for this condition and skips
the statement that sets next.prev = prev in this case.

3)

@Override
public E remove(int index) {
  rangeCheck(index);

  Node<E> p = getNode(index);
  E result = p.getData();

  p.getPrev().setNext(p.getNext());

  if (p.getNext() != null) {
    p.getNext().setPrev(p.getPrev());
  }

  size -= 1;

  return result;
}


4)

public class LinkedList<E> implements List<E> {
  private static final String SPACE = " ";
  private static final String OPEN_BRACKET = "[";
  private static final String CLOSED_BRACKET = "]";

  private Node<E> head = new Node<>();

  private int size = 0;

  ...
}

4a)

@Setter
@Getter
@Builder
@NoArgsConstructor
@AllArgsConstructor
private static class Node<T> {
  private T data;

  private Node<T> next;
  private Node<T> prev;
}

4b)

@Override
public boolean add(E item) {
  Node<E> p = getNode(size - 1);
  Node<E> newNode = new Node<>(item, null, p);

  p.setNext(newNode);
  size += 1;

  return true;
}

4c)

@Override
public void add(int index, E item) {
  if (index < 0 || index > size) {
    throw new IndexOutOfBoundsException();
  }

  if (index == size) {
    add(item);
  } else {
    Node<E> p = getNode(index);
    Node<E> newNode = new Node<>(item, p, p.getPrev());

    p.getPrev().setNext(newNode);
    p.setPrev(newNode);
    size += 1;
  }
}


4d)

@Override
public E get(int index) {
  rangeCheck(index);

  Node<E> p = getNode(index);

  return p.getData();
}

4e)

@Override
public int indexOf(E item) {
  int i = 0;

  Node<E> p = head.getNext();

  while (p != null) {
    if (p.getData().equals(item)) {
      return i;
    }

    p = p.getNext();
    i += 1;
  }

  return -1;
}

4f)

@Override
public boolean isEmpty() {
  return size == 0;
}

fg)

@Override
public E set(int index, E item) {
  rangeCheck(index);

  Node<E> p = getNode(index);

  E result = p.getData();

  p.setData(item);

  return result;
}

4h)

@Override
public int size() {
  return size;
}

5)


METHOD 1 - BY CALLING THE OTHER ADD
-----------------------------------

@Override
public boolean add(E item) {
  add(size, item);

  return true;
}

@Override
public void add(int index, E item) {
  if (index < 0 || index > size) {
    throw new IndexOutOfBoundsException();
  }

  Node<E> prev = getNode(index - 1);
  Node<E> newNode = new Node<>(item, prev.getNext(), prev);

  if (prev.getNext() != null) {
    prev.getNext().setPrev(newNode);
  }

  prev.setNext(newNode);
  size += 1;
}

METHOD 2 - FROM SCRATCH
-----------------------

@Override
public boolean add(E item) {
  Node<E> p = getNode(size - 1);
  Node<E> newNode = new Node<>(item, null, p);

  p.setNext(newNode);
  size += 1;

  return true;
}

COMPARISON
----------

Method 2 is superior because there is no need for the rangeCheck in this case. Additionally, there
is no need for the check for the last node. So these 2 extra steps are skipped, which is a slight
performance optimization. However, the best way to do this method (i.e. add(E item)) is by using
a tail pointer. This would eliminate the need for the traversal to find the last node.


6) I used a StringJoiner because it is more suitable for this case. It's pretty similar though.

@Override
public String toString() {
  Node<E> p = head.getNext();

  StringJoiner joiner = new StringJoiner(SPACE);

  joiner.add(OPEN_BRACKET);

  while(p != null) {
    String dataString = p.getData().toString();

    joiner.add(dataString);
    p = p.getNext();
  }

  joiner.add(CLOSED_BRACKET);

  return joiner.toString();
}


7)

public static void main(String[] args) {
  List<Integer> integerList = new LinkedList<>();

  for(int i = 0; i < 5; i++) {
    integerList.add(i);
    System.out.println("item " + i + ": " + integerList.get(i));
  }

  System.out.println();
  System.out.println(integerList);
  System.out.println();

  while(!integerList.isEmpty()) {
    System.out.println(integerList.remove(0));
  }

  System.out.println();
  System.out.println("Size: " + integerList.size());
  System.out.println();

  List<Double> doubleList = new LinkedList<>();

  for(int i = 0; i < 5; i++) {
    doubleList.add((double) i);
    System.out.println("item " + i + ": " + doubleList.get(i));
  }

  System.out.println();
  System.out.println(doubleList);
  System.out.println();

  while(!doubleList.isEmpty()) {
    System.out.println(doubleList.remove(0));
  }

  System.out.println();
  System.out.println("Size: " + doubleList.size());
  System.out.println();


  List<String> stringList = new LinkedList<>();

  for(int i = 0; i < 5; i++) {
    stringList.add(String.valueOf(i));
    System.out.println("item " + i + ": " + stringList.get(i));
  }

  System.out.println();
  System.out.println(stringList);
  System.out.println();

  while(!stringList.isEmpty()) {
    System.out.println(stringList.remove(0));
  }

  System.out.println();
  System.out.println("Size: " + stringList.size());
  System.out.println();
}


8a) add(E item) is O(n) because it has to do a full traversal to find the last node to insert after.

8b) add(index, item) is O(n) because it has to search for the index node, which could potentially require
a full traversal, in order to find the index node.

8c) get(index) is O(n) because it has search for the index node, which could potentially require all
nodes to be traversed.

8d) indexOf(E item) is O(n) because it has to do a linear search for the item, which could potentially
require all nodes to be traversed.

8e) isEmpty() is O(1) because it only compares size to 0.

8f) set(index, item) is O(n) because it has to search for the index node, which could potentially
require a full traversal of the list.

8g) size() is O(1) because it simply returns the size attribute.

9) The ArrayList implementation is superior for the set, get and add(E item) methods because the
array implementation allows for constant time access to the array elements, which allows these
methods to be executed in O(1) time instead of O(n) like the LinkedList. In theory, the LinkedList
implementation could be faster for add(index, item) and remove(index) (i.e. inserting and removing
in the middle of the list) if it did not have to traverse the entire list just to find the index
node. However, without using an iterator, we can't do that. Therefore, at this point the ArrayList
method is generally preferable.

10a) The get() method potentially requires a full traversal. It is within a loop that executes over
the entire list. Therefore, the code fragment is O(n^2).

10b) RemoveAt(0) is a special case of this implementation of the removeAt method that can be
executed in constant time. However, it is being executed once for each item in the list. Therefore,
the code fragment is O(n).

10c) This implementation of hte removeAt(items.size() - 1) method requires a full traversal to
get a handle on the index node of the last item in the list. Therefore, the removeAt method is O(n),
even in this special case. In addition, this method is being called for each item in the list.
Therefore, the code fragment is O(n^2).


11a) The implementation of add(E item) from this text is O(n), because it traverses the entirety,
of the list to find the last element. This code fragment performs a loop over n items where each
loop performs an add. Therefore, this is O(n^2).

11b) The add(0, item) method is a special case of the add method, in that it does not require a
traversal to find the node to insert at because we are inserting at the head. Therefore it executes
in constant time. However, it is being executed in a loop and therefore the code fragment is O(n).

