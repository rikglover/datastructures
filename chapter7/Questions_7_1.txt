1a)
            | m                       if n = 0
add(m, n) = |
            | 1 + add(m, n - 1)       if n > 0

add(11, 3) -> 1 + add(11, 2)
           -> 1 + (1 + add(11, 1))
           -> 1 + (1 + (1 + add(11, 0)))
           -> 1 + (1 + (1 + 11))
           -> 1 + (1 + (12))
           -> 1 + (13)
           -> 14

1b)

public static int add(int m, int n) {
  if(n == 0) {
    return m;
  } else {
    return 1 + add(m, n - 1);
  }
}


2a)

            | 0                  if n = 0
mul(m, n) = |
            | m + mul(m, n - 1)  if n > 0


mul(2, 4) -> 2 + mul(2, 3)
          -> 2 + (2 + mul(2, 2))
          -> 2 + (2 + (2 + mul(2, 1)))
          -> 2 + (2 + (2 + (2 + mul(2, 0))))
          -> 2 + (2 + (2 + (2 + 0)))
          -> 2 + (2 + (2 + 2))
          -> 2 + (2 + 4)
          -> 2 + 6
          -> 8


2b)

public static int mul(int m, int n) {
  if (n == 0) {
    return 0;
  } else {
    return m + mul(m, n - 1);
  }
}


3a)

            | 1                  if n == 0
pow(m, n) = |
            | m * pow(m, n - 1)  if n > 0


pow(3, 3) -> 3 * pow(3, 2)
          -> 3 * (3 * pow(3, 1))
          -> 3 * (3 * (3 * pow(3, 0)))
          -> 3 * (3 * (3 * 1))
          -> 3 * (3 * 3)
          -> 3 * 9
          -> 27


3b)

public static int pow(int m, int n) {
  if (n == 0) {
    return 1;
  } else {
    return m * pow(m, n - 1);
  }
}


4)

public static int length(String s) {
  if (StringUtils.EMPTY.equals(s)) {
    return 0;
  } else {
    return 1 + length(s.substring(1));
  }
}


5)
// This answe works, but his answer is slightly better
public static String reverse(String s) {
  if (s.length() <= 1) {
    return s;
  } else {
    int indexOfLastChar = s.length() - 1;

    String lastCharSubstring = s.substring(indexOfLastChar);
    String substringBeforeLastChar = s.substring(0, indexOfLastChar);

    return lastCharSubstring + reverse(substringBeforeLastChar);
  }
}


6)

public static int fib(int n) {
  if (n == 0 || n == 1) {
    return 1;
  } else {
    return fib(n - 1) + fib(n - 2);
  }
}

*** I DIDN'T GET THIS ONE RIGHT BECAUSE I HAD THE DEFINITION OF FIBONNACI WRONG AT THE BASE CASE ***
** I SHOULD HAVE TESTED BETTER **

** BELOW IS CORRECT **

public static int fib(int n) {
  if (n <= 1) {
    return n;
  } else {
    return fib(n - 1) + fib(n - 2);
  }
}


7)

public static int gcd(int m, int n) {
  if (n == 0) {
    return m;
  } else {
    return gcd(n, m % n);
  }
}


8)

public static String bits(int n) {
  if (n == 0 || n == 1) {
    return String.valueOf(n);
  } else {
    int bit = n % 2;
    int remainingBits = n / 2;

    return bits(remainingBits) + String.valueOf(bit);
  }
}
