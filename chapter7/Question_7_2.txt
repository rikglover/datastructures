1)

add(m, n)
   -> 1 + add(m, n - 1)
             -> 1 + add(m, n - 2)
                        -> 1 + add(m, ...)
                                   -> 1 + add(m, 1)
                                              -> 1 + add(m, 0)

add(m, n) makes n calls, which makes it O(n)


2)

mul(m, n)
  -> m + mul(m, n - 1)
           -> m + mul(m, n - 2)
                    -> m + mul(m, n - 3)
                             -> m + mul(m, ...)
                                      -> m + mul(m, 1)
                                               -> m + mul(m, 0)

mul(m, n) makes n calls. Therefore, it is O(n)


3)

pow(m, n)
  -> m * pow(m, n - 1)
           -> m * pow(m, n - 2)
                    -> m * pow(m, n - 3)
                             -> m * pow(m, ...)
                                      -> m * pow(m, 2)
                                               -> m * pow(m, 1)

pow makes n - 1 calls, therefore it is O(n)

** The above tree could go down to pow(m, 0), which would be 1. **
** However, it makes the number of calls easier to calculate as a simple 0 ... n - 1, or n calls. **


4)

public static int pow2(int m, int n) {
  if (n == 1) {
    return m;
  } else if (n % 2 == 1) {
    return pow(m, n / 2) * pow(m, n / 2) * m;
  } else {
    return pow(m, n / 2) * pow(m, n / 2);
  }
}

** The above computes the correct value. However, you don't need to call pow(m, n / 2) twice since **
** the value is the same each time. Therefore, the above is still O(n) **
** In order to get O(log(n)) you need to save off the value of pow(n, n / 2) rather than calling it twice **
** should be as follows: **

public static int pow2(int m, int n) {
  if (n == 1) {
    return m;
  } else {
    int powResult = pow(m, n / 2);

    if (n % 2 == 1) {
      return powResult * powResult * m;
    } else {
      return powResult * powResult;
    }
  }
}


5)

for n >= 2, times(n, m) = fib(m - n + 1)
for n = 1, times(1, m) = fib(m - 2)

So, fib(1) appears fib(98) times in fib(100) and fib(2) appears fib(99) times in fib(100)


6) Answered on white board. Got the answer correct.
