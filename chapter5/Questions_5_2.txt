1) For enqueuing, the logic is to put the item to be enqueued in the next array cell after the current
rear. Therefore, you must first increment the index for rear and then perform the assignment to the
data array located at the rear. For dequeing, the logic is to fetch the current item stored at front
and THEN increment the value of front in order to remove the item at the front of the queue.

2) front = -1, back = -1

** My solution was different than his **

** New answer follows below **

Using the code provided by the author as a starting point, where we will be incrementing the
front and back by doing the following:

front = (front + 1) % data.length;

and

back = (back + 1) % data.length;

The simplest starting values for front and back are 0 and -1, respectively. Because we will
initialize the size variable to 0, we will know that the queue has zero in this starting state,
and therefore, be empty.

3) ** My answer was not quite right here **


** New answer follows below **

Using the code provided by the author as a starting point, where we will be incrementing the
front and back by doing the following:

front = (front + 1) % data.length;

and

back = (back + 1) % data.length;

3a) A full queue and empty queue are both represented with the back immediately preceding the front.
Therefore, (rear + 1) % capacity == front will be true in both cases.

3b) Because you cannot differentiate between a full and an empty queue as described in (3a) without
a size attribute, you must develop a different strategy for differentiating between full and empty.
One approach is to define full to mean that the array contains data.length - 1 items. This
will ensure that you can differentiate between a full and empty queue as follows:

If (rear + 1) % capacity == front, the queue is empty.
If (rear + 2) % capacity == front, the queue is full

This will unfortunately have the side effect of only allowing you to store data.length - 1 elements
in the queue, which is suboptimal. Additionally, you also are still starting the back index out at
index -1, which is quirky.

An alternative strategy, which is the strategy used by the Java Collections Framework ArrayDeque
implementation, is to redefine the semantics of the front and back variables as follows:

Rather than having both front and back refer to the current index of the front and back values, have
front continue to refer to the current index of the front, and back refer to the NEXT index of the
back. This subtle change in semantics for the back variable will allow you to start the front and
back indices at 0 (which is more natural) as well as utilize all cells of the array, rather than
only data.length - 1 as with the previous solution.

However, in order to accomplish this it will be necessary to change the logic of the enqueue method
as follows:

Because the back variable now represents the NEXT index for the back, we will now add new items to
the back of the queue as the first step of the enqueue method and will increment the back index to the
NEXT location of the back after storing the item. Additionally, we will move the check for the need
to resize to after these two steps and will use the condition that front == back to check for a full
queue. Of course, an empty queue is also indicated by this criteria. However, because we are
performing this check AFTER adding an element we know that the queue cannot be empty, which
therefore means it must be full. So, if after adding an item, front equals back we will know that w
have a full queue, and must therefore resize the array. The dequeue, peek, resize and isEmpty methods
will continue to work as before. However, the size calculation will need to be updated to reflect
the fact that the back variable now stores the NEXT index for the back, which means the size
calculation is 1 less than with the previous implementation and that there is no need to take the
modulus of the size calculation when front is greater than back.

Please see ArrayQueueJava for more details.


4) The resizing only occurs in the relatively rare event that you have exceeded the capacity of the
underlying array for the queue. Therefore, just like the stack implementation, the resizing of the
queue does not impact the performance.

5)

public class ArrayQueue<E> implements Queue<E> {
  private static final int DEFAULT_CAPACITY = 10;
  private static final int RESIZE_FACTOR = 2;

  private int capacity = DEFAULT_CAPACITY;
  private int size = 0;
  private int front = 0;
  private int back = -1;

  private E[] data;

  ...

}

5a)

@Override
public E dequeue() {
  if(isEmpty()) {
    throw new NoSuchElementException();
  }

  E result = data[front];

  data[front] = null;
  front = (front + 1) % capacity;
  size -= 1;

  return result;
}

5b)

@Override
public void enqueue(E item) {
  if(isFull()) {
    resizeArray();
  }

  back = (back + 1) % capacity;
  data[back] = item;
  size += 1;
}

5c)

@Override
public boolean isEmpty() {
  return size == 0;
}

5d)

@Override
public E peek() {
  if(isEmpty()) {
    throw new NoSuchElementException();
  }

  return data[front];
}

5e)

@Override
public int size() {
  return size;
}

5f)

private void resizeArray() {
  int j = front;
  int oldCapacity = capacity;

  E[] newData = allocateArray(RESIZE_FACTOR * oldCapacity);

  for(int i = 0; i < size; i++) {
    newData[i] = data[j];
    j = (j + 1) % oldCapacity;
  }

  data = newData;
  front = 0;
  back = size - 1;
}

5g)

public ArrayQueue() {
  this(DEFAULT_CAPACITY);
}

public ArrayQueue(int capacity) {
  data = allocateArray(capacity);
}


6)

public static void main(String[] args) {
  Queue<Integer> integerQueue = new ArrayQueue<>();

  integerQueue.enqueue(1);
  integerQueue.enqueue(2);
  integerQueue.enqueue(3);

  System.out.println();
  System.out.println("Size: " + integerQueue.size());

  while (!integerQueue.isEmpty()) {
    int peekItem = integerQueue.peek();

    System.out.println(peekItem);

    if (peekItem != integerQueue.dequeue()) {
      throw new IllegalStateException("Peek value should be equal to pop value");
    }
  }

  Queue<Double> doubleQueue = new ArrayQueue<>();

  doubleQueue.enqueue(1.0);
  doubleQueue.enqueue(2.0);
  doubleQueue.enqueue(3.0);

  System.out.println();
  System.out.println("Size: " + doubleQueue.size());

  while (!doubleQueue.isEmpty()) {
    double peekItem = doubleQueue.peek();

    System.out.println(peekItem);

    if (peekItem != doubleQueue.dequeue()) {
      throw new IllegalStateException("Peek value should be equal to pop value");
    }
  }

  Queue<String> stringQueue = new ArrayQueue<>();

  stringQueue.enqueue("Hello ");
  stringQueue.enqueue("world");
  stringQueue.enqueue("!!!");

  System.out.println();
  System.out.println("Size: " + stringQueue.size());

  while (!stringQueue.isEmpty()) {
    String peekItem = stringQueue.peek();

    System.out.println(peekItem);

    if (!peekItem.equals(stringQueue.dequeue())) {
      throw new IllegalStateException("Peek value should be equal to pop value");
    }
  }
}

7a) The dequeue operation requires one step to check for empty, one step to save off the return
value from the front of the queue, one step to set the front value to null, one step to increment
the front index, one step to decrement size and one step to return the result. This is 6 steps,
that do not change with the size of the queue. Therefore it is O(1).

7b) The enqueue operation requires 1 step to check for a full array, 1 step to increment the back
index, one step to assign the value to the new back and one step to increment the size variable.
This is 4 steps (assuming there is no need to resize), and the steps do not vary with the size of
the queue. It is therefore O(1).

7c) The isEmpty() method simply compares the size variable to 0 and returns the result. This is a
fixed number of steps and therefore O(1).

7d) Peek checks for an empty queue and then returns the front item. This is 2 steps, which is fixed,
and therefore O(1).

7e) The size method returns the value of the size attribute. This is 1 step, which is obviously
fixed, and therefore O(1).


