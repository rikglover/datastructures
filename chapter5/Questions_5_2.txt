1) For enqueuing, the logic is to put the item to be enqueued in the next array cell after the current
rear. Therefore, you must first increment the index for rear and then perform the assignment to the
data array located at the rear. For dequeing, the logic is to fetch the current item stored at front
and THEN increment the value of front in order to remove the item at the front of the queue.

2) front = -1, back = -1

** My solution was different than his **

3) ** My answer was not quite right here **

** need to redo **

4) The resizing only occurs in the relatively rare event that you have exceeded the capacity of the
underlying array for the queue. Therefore, just like the stack implementation, the resizing of the
queue does not impact the performance.

5)

public class ArrayQueue<E> implements Queue<E> {
  private static final int DEFAULT_CAPACITY = 10;
  private static final int RESIZE_FACTOR = 2;

  private int capacity = DEFAULT_CAPACITY;
  private int size = 0;
  private int front = 0;
  private int back = -1;

  private E[] data;

  ...

}

5a)

@Override
public E dequeue() {
  if(isEmpty()) {
    throw new NoSuchElementException();
  }

  E result = data[front];

  data[front] = null;
  front = (front + 1) % capacity;
  size -= 1;

  return result;
}

5b)

@Override
public void enqueue(E item) {
  if(isFull()) {
    resizeArray();
  }

  back = (back + 1) % capacity;
  data[back] = item;
  size += 1;
}

5c)

@Override
public boolean isEmpty() {
  return size == 0;
}

5d)

@Override
public E peek() {
  if(isEmpty()) {
    throw new NoSuchElementException();
  }

  return data[front];
}

5e)

@Override
public int size() {
  return size;
}

5f)

private void resizeArray() {
  int j = front;
  int oldCapacity = capacity;

  E[] newData = allocateArray(RESIZE_FACTOR * oldCapacity);

  for(int i = 0; i < size; i++) {
    newData[i] = data[j];
    j = (j + 1) % oldCapacity;
  }

  data = newData;
  front = 0;
  back = size - 1;
}

5g)

public ArrayQueue() {
  this(DEFAULT_CAPACITY);
}

public ArrayQueue(int capacity) {
  data = allocateArray(capacity);
}


6)

public static void main(String[] args) {
  Queue<Integer> integerQueue = new ArrayQueue<>();

  integerQueue.enqueue(1);
  integerQueue.enqueue(2);
  integerQueue.enqueue(3);

  System.out.println();
  System.out.println("Size: " + integerQueue.size());

  while (!integerQueue.isEmpty()) {
    int peekItem = integerQueue.peek();

    System.out.println(peekItem);

    if (peekItem != integerQueue.dequeue()) {
      throw new IllegalStateException("Peek value should be equal to pop value");
    }
  }

  Queue<Double> doubleQueue = new ArrayQueue<>();

  doubleQueue.enqueue(1.0);
  doubleQueue.enqueue(2.0);
  doubleQueue.enqueue(3.0);

  System.out.println();
  System.out.println("Size: " + doubleQueue.size());

  while (!doubleQueue.isEmpty()) {
    double peekItem = doubleQueue.peek();

    System.out.println(peekItem);

    if (peekItem != doubleQueue.dequeue()) {
      throw new IllegalStateException("Peek value should be equal to pop value");
    }
  }

  Queue<String> stringQueue = new ArrayQueue<>();

  stringQueue.enqueue("Hello ");
  stringQueue.enqueue("world");
  stringQueue.enqueue("!!!");

  System.out.println();
  System.out.println("Size: " + stringQueue.size());

  while (!stringQueue.isEmpty()) {
    String peekItem = stringQueue.peek();

    System.out.println(peekItem);

    if (!peekItem.equals(stringQueue.dequeue())) {
      throw new IllegalStateException("Peek value should be equal to pop value");
    }
  }
}

7a) The dequeue operation requires one step to check for empty, one step to save off the return
value from the front of the queue, one step to set the front value to null, one step to increment
the front index, one step to decrement size and one step to return the result. This is 6 steps,
that do not change with the size of the queue. Therefore it is O(1).

7b) The enqueue operation requires 1 step to check for a full array, 1 step to increment the back
index, one step to assign the value to the new back and one step to increment the size variable.
This is 4 steps (assuming there is no need to resize), and the steps do not vary with the size of
the queue. It is therefore O(1).

7c) The isEmpty() method simply compares the size variable to 0 and returns the result. This is a
fixed number of steps and therefore O(1).

7d) Peek checks for an empty queue and then returns the front item. This is 2 steps, which is fixed,
and therefore O(1).

7e) The size method returns the value of the size attribute. This is 1 step, which is obviously
fixed, and therefore O(1).


