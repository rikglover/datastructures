1) on whiteboard

2) The reason a reverse sorted insertion sort is the worst case is that when the items are reverse
sorted the inner loop must shift every single element to the right in order to put the key into its
proper place. This means the maximum number of steps are executed to perform the sort.

3) on whiteboard

4)

a) The for loop starts at 1 because starting at 0 would always have the same result, to put the
element at location 0 in location 0.

b) The array access at element j (i.e. data[j]) is guaranteed to be valid because the outer loop
index, i, starts at item 1, and j ranges from i - 1 (or 0) to data.length - 1 (which is also
a valid index).

c) The inner loop control expression performs the loop if j is greater than or equal to 0 and
key < data[j]. Because j starts at i - 1 and runs down to 0 inclusively, it executes as many as
i - 1, i - 2, ..., 1, 2, 0 times, which is equal to i iterations. However, because the loop control
expression also checks for key < data[j] the loop may bail out before performing all i iterations.
Therefore, the inner loop executes at most i times.

5) The insertionSort algorithm's best case performance is O(n). This occurs when the data is
already sorted. The reason it is O(n) is because the outer loop executes 1 time, and the inner
loop is never executed because the condition that key < data[j] is never met.

6) If the data is randomly distributed, the inner loop will execute on average i/2 times. However,
the outer loop will still need to execute a full n - 1 times. Therefore, the average case performance
is (n/2)* (n - 1), which is (1/2)*n^2 - n/2, which leads to O(n^2) performance.

**The derivation is not quite right in the above.**

Correct answer is as follows:

In general, the inner loop will execute at most

1 + 2 + 3 + ... + (n - 3) + (n - 2) + (n - 1)

which is

1 + ... + (3 + (n - 3)) + (2 + (n - 2)) + (1 + (n - 1))

or

n * (n - 1)/2

but with random data each inner loop on average will execute only i / 2 each time, like this

1/2 + ... + (3 + (n - 3))/2 + (2 + (n - 2))/2 + (1 + (n - 1))/2

or

n/2 * (n - 1)/2

or

(1/4) * n * (n - 1)

or

(1/4) * (n^2 - n)

which is O(n^2)


7) done but already removed

8)

// from main

int[] data = new int[100];

randomFill(data);

displayArray(data);

insertionSort(data);

boolean sorted = isSorted(data);

System.out.println("IsSorted = " + sorted);

System.out.println("\n");

displayArray(data);


// insertionSort definition
public static void insertionSort(int[] data) {
  for(int i = 1; i < data.length; i++) {
    int key = data[i];
    int j = i - 1;

    while(j >= 0 && key < data[j]) {
      data[j + 1] = data[j];
      j -= 1;
    }

    data[j + 1] = key;
  }
}

private static void randomFill(int[] data, int max) {
  Random random = new Random();

  for(int i = 0; i < data.length; i++) {
    data[i] = random.nextInt(max);
  }
}


9)

private static boolean isSorted(int[] data) {
  for(int i = 0; i < data.length - 1; i++) {
    if(data[i] > data[i + 1]) {
      return false;
    }
  }

  return true;
}


10)

private static void randomFill(int[] data) {
  Random random = new Random();

  for(int i = 0; i < data.length; i++) {
    data[i] = random.nextInt();
  }
}


11)

int arraySize = 100;
Map<Integer, Double> sortTimes = new LinkedHashMap<>();

do {
  int[] testData = new int[arraySize];

  randomFill(testData);

  long time1 = System.currentTimeMillis();

  insertionSort(testData);

  long time2 = System.currentTimeMillis();
  double timeDelta = time2 - time1;

  if(!isSorted(data)) {
    throw new IllegalStateException("Should be sorted");
  }

  sortTimes.put(arraySize, timeDelta);

  arraySize *= 2;
} while(arraySize < 200000);

sortTimes.entrySet().forEach(entry -> {
  System.out.println("ArraySize = " + entry.getKey() + " -- Time = " + entry.getValue());
});


12)

int[] sumData = new int[100];

randomFill(sumData, 100);
long sum = Arrays.stream(sumData).mapToLong(x -> x).sum();
System.out.println("Sum = " + sum(sumData) + " actual Sum = " + sum);


int[] maxData = new int[100];

randomFill(maxData, 100);
long max = Arrays.stream(maxData).mapToLong(x -> x).max().orElseThrow(IllegalStateException::new);
System.out.println("Max = " + max(maxData) + " actual max = " + max);


int[] minData = new int[100];

randomFill(minData, 100);
long min = Arrays.stream(minData).mapToLong(x -> x).min().orElseThrow(IllegalStateException::new);
System.out.println("min = " + min(minData) + " actual min = " + min);